var tipuesearch = {"pages":[{"text":"1D heat equation This is the solution for the Fortran Modernisation Workshop .\nThe workshop exercise solves. \n\\begin{equation}\n\\frac{\\partial H}{\\partial t} - \\kappa\\frac{\\partial&#94;{2} H}{\\partial x&#94;{2}} = f(x)\n\\end{equation} Note This is a series of Fortran workshops to help computational scientists write\nefficient and portable code, and to encourage best practices in software\nengineering. Bug If you find any bugs, please email me Developer Info Zhong-Nan Wang Fortran workshop attendee","tags":"","loc":"index.html","title":" 1D heat equation "},{"text":"This File Depends On sourcefile~~fd1d_heat_explicit.f90~~EfferentGraph sourcefile~fd1d_heat_explicit.f90 fd1d_heat_explicit.f90 sourcefile~solver_mod.f90 Solver_mod.f90 sourcefile~solver_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~io_mod.f90 IO_mod.f90 sourcefile~io_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~types_mod.f90 Types_mod.f90 sourcefile~types_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~types_mod.f90->sourcefile~solver_mod.f90 sourcefile~types_mod.f90->sourcefile~io_mod.f90 sourcefile~cfl_mod.f90 CFL_mod.f90 sourcefile~types_mod.f90->sourcefile~cfl_mod.f90 sourcefile~rhs_mod.f90 RHS_mod.f90 sourcefile~types_mod.f90->sourcefile~rhs_mod.f90 sourcefile~cfl_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~rhs_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~rhs_mod.f90->sourcefile~solver_mod.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Programs fd1d_heat_explicit_prb Source Code fd1d_heat_explicit.f90 Source Code !> Zhong-Nan Wang, University of Cambridge !> Solves the one dimensional heat diffusion equation !>  \\frac{\\partial H}{\\partial t} !>     - \\kappa\\frac{\\partial&#94;{2} H}{\\partial x&#94;{2}} = f(x)  program fd1d_heat_explicit_prb use :: types_mod , only : dp use :: RHS_mod use :: CFL_mod use :: IO_mod use :: Solver_mod implicit none integer , parameter :: T_NUM = 201 integer , parameter :: X_NUM = 21 real ( kind = dp ) :: cfl real ( kind = dp ) :: dt ! real (kind=dp) :: h(x_num) ! real (kind=dp) :: h_new(x_num) real ( kind = dp ), dimension (:), allocatable :: h , h_new ! the \"matrix\" stores all x-values for all t-values ! remember Fortran is column major, meaning that rows are contiguous ! real (kind=dp) :: hmat(x_num, t_num) real ( kind = dp ), dimension (:,:), allocatable :: hmat integer :: i integer :: j real ( kind = dp ) :: k !real (kind=dp) :: t(t_num) real ( kind = dp ) :: t_max real ( kind = dp ) :: t_min !real (kind=dp) :: x(x_num) real ( kind = dp ) :: x_max real ( kind = dp ) :: x_min real ( kind = dp ), dimension (:), allocatable :: t , x write ( * , '(a)' ) ' ' write ( * , '(a)' ) 'FD1D_HEAT_EXPLICIT_PRB:' write ( * , '(a)' ) '  FORTRAN77 version.' write ( * , '(a)' ) '  Test the FD1D_HEAT_EXPLICIT library.' write ( * , '(a)' ) ' ' write ( * , '(a)' ) 'FD1D_HEAT_EXPLICIT_PRB:' write ( * , '(a)' ) '  Normal end of execution.' write ( * , '(a)' ) ' ' write ( * , '(a)' ) ' ' write ( * , '(a)' ) 'FD1D_HEAT_EXPLICIT_TEST01:' write ( * , '(a)' ) '  Compute an approximate solution to the time-dependent' write ( * , '(a)' ) '  one dimensional heat equation:' write ( * , '(a)' ) ' ' write ( * , '(a)' ) '    dH/dt - K * d2H/dx2 = f(x,t)' write ( * , '(a)' ) ' ' write ( * , '(a)' ) '  Run a simple test case.' ! allocate variables allocate ( h ( 1 : X_NUM ) ) allocate ( h_new ( 1 : X_NUM ) ) allocate ( hmat ( 1 : X_NUM , 1 : T_NUM ) ) allocate ( t ( 1 : T_NUM ) ) allocate ( x ( 1 : X_NUM ) ) ! heat coefficient k = 0.002e+00_dp ! the x-range values x_min = 0.0e+00_dp x_max = 1.0e+00_dp ! x_num is the number of intervals in the x-direction call r8vec_linspace ( x_min , x_max , x ) ! the t-range values. integrate from t_min to t_max t_min = 0.0e+00_dp t_max = 8 0.0e+00_dp ! t_num is the number of intervals in the t-direction dt = ( t_max - t_min ) / real ( t_num - 1 , kind = dp ) call r8vec_linspace ( t_min , t_max , t ) ! get the CFL coefficient call fd1d_heat_explicit_cfl ( k , t_num , t_min , t_max , x_num , x_min , x_max , cfl ) if ( 0.5e+00_dp <= cfl ) then write ( * , '(a)' ) ' ' write ( * , '(a)' ) 'FD1D_HEAT_EXPLICIT_CFL - Fatal error!' write ( * , '(a)' ) '  CFL condition failed.' write ( * , '(a)' ) '  0.5 <= K * dT / dX / dX = CFL.' stop end if ! set the initial condition do j = 1 , x_num h ( j ) = 5 0.0e+00_dp end do ! set the bounday condition h ( 1 ) = 9 0.0e+00_dp h ( x_num ) = 7 0.0e+00_dp ! initialise the matrix to the initial condition do i = 1 , x_num hmat ( i , 1 ) = h ( i ) end do ! the main time integration loop do j = 2 , t_num call fd1d_heat_explicit ( x , t ( j - 1 ), dt , cfl , h , h_new ) do i = 1 , x_num hmat ( i , j ) = h_new ( i ) h ( i ) = h_new ( i ) end do end do ! write data to files call r8mat_write ( 'h_test01.txt' , hmat ) call r8vec_write ( 't_test01.txt' , t ) call r8vec_write ( 'x_test01.txt' , x ) deallocate ( h , h_new , hmat , t , x ) contains end program","tags":"","loc":"sourcefile/fd1d_heat_explicit.f90.html","title":"fd1d_heat_explicit.f90 – 1D heat equation"},{"text":"Files Dependent On This One sourcefile~~types_mod.f90~~AfferentGraph sourcefile~types_mod.f90 Types_mod.f90 sourcefile~solver_mod.f90 Solver_mod.f90 sourcefile~types_mod.f90->sourcefile~solver_mod.f90 sourcefile~io_mod.f90 IO_mod.f90 sourcefile~types_mod.f90->sourcefile~io_mod.f90 sourcefile~fd1d_heat_explicit.f90 fd1d_heat_explicit.f90 sourcefile~types_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~cfl_mod.f90 CFL_mod.f90 sourcefile~types_mod.f90->sourcefile~cfl_mod.f90 sourcefile~rhs_mod.f90 RHS_mod.f90 sourcefile~types_mod.f90->sourcefile~rhs_mod.f90 sourcefile~solver_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~io_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~cfl_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~rhs_mod.f90->sourcefile~solver_mod.f90 sourcefile~rhs_mod.f90->sourcefile~fd1d_heat_explicit.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Modules Types_mod Source Code Types_mod.f90 Source Code module Types_mod use , intrinsic :: iso_fortran_env implicit none !everything is private unless otherwise stated private public :: SP , DP , SI , DI integer , parameter :: SP = REAL32 integer , parameter :: DP = REAL64 integer , parameter :: SI = INT32 integer , parameter :: DI = INT64 contains end module Types_mod","tags":"","loc":"sourcefile/types_mod.f90.html","title":"Types_mod.f90 – 1D heat equation"},{"text":"This File Depends On sourcefile~~io_mod.f90~~EfferentGraph sourcefile~io_mod.f90 IO_mod.f90 sourcefile~types_mod.f90 Types_mod.f90 sourcefile~types_mod.f90->sourcefile~io_mod.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files Dependent On This One sourcefile~~io_mod.f90~~AfferentGraph sourcefile~io_mod.f90 IO_mod.f90 sourcefile~fd1d_heat_explicit.f90 fd1d_heat_explicit.f90 sourcefile~io_mod.f90->sourcefile~fd1d_heat_explicit.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Modules IO_mod Source Code IO_mod.f90 Source Code module IO_mod use Types_mod implicit none !everything is private unless otherwise stated private public :: r8mat_write , r8vec_linspace , r8vec_write contains subroutine r8mat_write ( output_filename , table ) implicit none integer :: m integer :: n integer :: j character ( len =* ), intent ( in ) :: output_filename integer :: output_unit_id character ( len = 30 ) :: string real ( kind = dp ), dimension (:,:), intent ( inout ) :: table m = size ( table (:,:), 1 ) n = size ( table (:,:), 2 ) output_unit_id = 10 open ( unit = output_unit_id , file = output_filename , status = 'replace' ) write ( string , '(a1,i8,a1,i8,a1,i8,a1)' ) '(' , m , 'g' , 24 , '.' , 16 , ')' do j = 1 , n write ( output_unit_id , string ) table ( 1 : m , j ) end do close ( unit = output_unit_id ) end subroutine subroutine r8vec_linspace ( a_first , a_last , a ) implicit none integer :: n real ( kind = dp ), dimension (:), intent ( inout ) :: a real ( kind = dp ), intent ( in ) :: a_first real ( kind = dp ), intent ( in ) :: a_last integer :: i n = size ( a ) do i = 1 , n a ( i ) = ( real ( n - i , kind = dp ) * a_first + real ( i - 1 , kind = dp ) * a_last ) / & real ( n - 1 , kind = dp ) end do end subroutine subroutine r8vec_write ( output_filename , x ) implicit none integer :: m integer :: n integer :: j character ( len =* ), intent ( in ) :: output_filename integer :: output_unit_id real ( kind = dp ), dimension (:), intent ( inout ) :: x n = size ( x ) output_unit_id = 11 open ( unit = output_unit_id , file = output_filename , status = 'replace' ) do j = 1 , n write ( output_unit_id , '(2x,g24.16)' ) x ( j ) end do close ( unit = output_unit_id ) end subroutine end module IO_mod","tags":"","loc":"sourcefile/io_mod.f90.html","title":"IO_mod.f90 – 1D heat equation"},{"text":"This File Depends On sourcefile~~solver_mod.f90~~EfferentGraph sourcefile~solver_mod.f90 Solver_mod.f90 sourcefile~rhs_mod.f90 RHS_mod.f90 sourcefile~rhs_mod.f90->sourcefile~solver_mod.f90 sourcefile~types_mod.f90 Types_mod.f90 sourcefile~types_mod.f90->sourcefile~solver_mod.f90 sourcefile~types_mod.f90->sourcefile~rhs_mod.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files Dependent On This One sourcefile~~solver_mod.f90~~AfferentGraph sourcefile~solver_mod.f90 Solver_mod.f90 sourcefile~fd1d_heat_explicit.f90 fd1d_heat_explicit.f90 sourcefile~solver_mod.f90->sourcefile~fd1d_heat_explicit.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Modules Solver_mod Source Code Solver_mod.f90 Source Code module Solver_mod use Types_mod use RHS_mod implicit none !everything is private unless otherwise stated private public :: fd1d_heat_explicit contains subroutine fd1d_heat_explicit ( x , t , dt , cfl , h , h_new ) implicit none integer :: x_num real ( kind = dp ), intent ( in ) :: cfl real ( kind = dp ), intent ( in ) :: dt real ( kind = dp ), dimension (:), intent ( in ) :: h real ( kind = dp ), dimension (:), intent ( out ) :: h_new integer :: j real ( kind = dp ), intent ( in ) :: t real ( kind = dp ), dimension (:), intent ( in ) :: x real ( kind = dp ) :: f ( size ( x )) x_num = size ( x ) do j = 1 , x_num f ( j ) = func ( j , x ) end do h_new ( 1 ) = 0.0e+00_dp do j = 2 , x_num - 1 h_new ( j ) = h ( j ) + dt * f ( j ) + cfl * ( h ( j - 1 ) - 2.0e+00_dp * h ( j ) + h ( j + 1 )) end do ! set the boundary conditions again h_new ( 1 ) = 9 0.0e+00_dp h_new ( x_num ) = 7 0.0e+00_dp end subroutine end module Solver_mod","tags":"","loc":"sourcefile/solver_mod.f90.html","title":"Solver_mod.f90 – 1D heat equation"},{"text":"This File Depends On sourcefile~~rhs_mod.f90~~EfferentGraph sourcefile~rhs_mod.f90 RHS_mod.f90 sourcefile~types_mod.f90 Types_mod.f90 sourcefile~types_mod.f90->sourcefile~rhs_mod.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files Dependent On This One sourcefile~~rhs_mod.f90~~AfferentGraph sourcefile~rhs_mod.f90 RHS_mod.f90 sourcefile~solver_mod.f90 Solver_mod.f90 sourcefile~rhs_mod.f90->sourcefile~solver_mod.f90 sourcefile~fd1d_heat_explicit.f90 fd1d_heat_explicit.f90 sourcefile~rhs_mod.f90->sourcefile~fd1d_heat_explicit.f90 sourcefile~solver_mod.f90->sourcefile~fd1d_heat_explicit.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Modules RHS_mod Source Code RHS_mod.f90 Source Code module RHS_mod use Types_mod implicit none !everything is private unless otherwise stated private public :: func contains function func ( j , x ) result ( d ) implicit none integer , intent ( in ) :: j real ( kind = dp ) :: d real ( kind = dp ), dimension (:), intent ( in ) :: x d = 0.0e+00_dp end function end module RHS_mod","tags":"","loc":"sourcefile/rhs_mod.f90.html","title":"RHS_mod.f90 – 1D heat equation"},{"text":"This File Depends On sourcefile~~cfl_mod.f90~~EfferentGraph sourcefile~cfl_mod.f90 CFL_mod.f90 sourcefile~types_mod.f90 Types_mod.f90 sourcefile~types_mod.f90->sourcefile~cfl_mod.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Files Dependent On This One sourcefile~~cfl_mod.f90~~AfferentGraph sourcefile~cfl_mod.f90 CFL_mod.f90 sourcefile~fd1d_heat_explicit.f90 fd1d_heat_explicit.f90 sourcefile~cfl_mod.f90->sourcefile~fd1d_heat_explicit.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Modules CFL_mod Source Code CFL_mod.f90 Source Code !> this module calculates the CFL number module CFL_mod use Types_mod implicit none !everything is private unless otherwise stated private public :: fd1d_heat_explicit_cfl contains !> calculates the CFL number !>  \\text{CFL} = \\kappa\\frac{\\Delta t}{\\Delta x&#94;2}  subroutine fd1d_heat_explicit_cfl ( k , t_num , t_min , t_max , x_num , x_min , & x_max , cfl ) implicit none !> calculate CFL number real ( kind = dp ), intent ( out ) :: cfl real ( kind = dp ) :: dx real ( kind = dp ) :: dt !> the heat constant  \\kappa  real ( kind = dp ), intent ( in ) :: k !> uppper bound of t-axis real ( kind = dp ), intent ( in ) :: t_max !> lower bound of t-axis real ( kind = dp ), intent ( in ) :: t_min !> number of intervals in t-axis integer , intent ( in ) :: t_num !> upper bound of x-axis real ( kind = dp ), intent ( in ) :: x_max !> lower bound of x-axis real ( kind = dp ), intent ( in ) :: x_min !> number of intervals in x-axis integer , intent ( in ) :: x_num dx = ( x_max - x_min ) / real ( x_num - 1 , kind = dp ) dt = ( t_max - t_min ) / real ( t_num - 1 , kind = dp ) cfl = k * dt / dx / dx write ( * , '(a)' ) ' ' write ( * , '(a,g14.6)' ) '  CFL stability criterion value = ' , cfl end subroutine end module CFL_mod","tags":"","loc":"sourcefile/cfl_mod.f90.html","title":"CFL_mod.f90 – 1D heat equation"},{"text":"Uses: iso_fortran_env module~~types_mod~~UsesGraph module~types_mod Types_mod iso_fortran_env iso_fortran_env iso_fortran_env->module~types_mod Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used By module~~types_mod~~UsedByGraph module~types_mod Types_mod program~fd1d_heat_explicit_prb fd1d_heat_explicit_prb module~types_mod->program~fd1d_heat_explicit_prb module~io_mod IO_mod module~types_mod->module~io_mod module~cfl_mod CFL_mod module~types_mod->module~cfl_mod module~rhs_mod RHS_mod module~types_mod->module~rhs_mod module~solver_mod Solver_mod module~types_mod->module~solver_mod module~io_mod->program~fd1d_heat_explicit_prb module~cfl_mod->program~fd1d_heat_explicit_prb module~rhs_mod->program~fd1d_heat_explicit_prb module~rhs_mod->module~solver_mod module~solver_mod->program~fd1d_heat_explicit_prb Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs.","tags":"","loc":"module/types_mod.html","title":"Types_mod – 1D heat equation"},{"text":"Uses: Types_mod module~~io_mod~~UsesGraph module~io_mod IO_mod module~types_mod Types_mod module~types_mod->module~io_mod iso_fortran_env iso_fortran_env iso_fortran_env->module~types_mod Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used By module~~io_mod~~UsedByGraph module~io_mod IO_mod program~fd1d_heat_explicit_prb fd1d_heat_explicit_prb module~io_mod->program~fd1d_heat_explicit_prb Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs.","tags":"","loc":"module/io_mod.html","title":"IO_mod – 1D heat equation"},{"text":"Uses: Types_mod RHS_mod module~~solver_mod~~UsesGraph module~solver_mod Solver_mod module~types_mod Types_mod module~types_mod->module~solver_mod module~rhs_mod RHS_mod module~types_mod->module~rhs_mod module~rhs_mod->module~solver_mod iso_fortran_env iso_fortran_env iso_fortran_env->module~types_mod Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used By module~~solver_mod~~UsedByGraph module~solver_mod Solver_mod program~fd1d_heat_explicit_prb fd1d_heat_explicit_prb module~solver_mod->program~fd1d_heat_explicit_prb Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs.","tags":"","loc":"module/solver_mod.html","title":"Solver_mod – 1D heat equation"},{"text":"Uses: Types_mod module~~rhs_mod~~UsesGraph module~rhs_mod RHS_mod module~types_mod Types_mod module~types_mod->module~rhs_mod iso_fortran_env iso_fortran_env iso_fortran_env->module~types_mod Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Used By module~~rhs_mod~~UsedByGraph module~rhs_mod RHS_mod module~solver_mod Solver_mod module~rhs_mod->module~solver_mod program~fd1d_heat_explicit_prb fd1d_heat_explicit_prb module~rhs_mod->program~fd1d_heat_explicit_prb module~solver_mod->program~fd1d_heat_explicit_prb Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs.","tags":"","loc":"module/rhs_mod.html","title":"RHS_mod – 1D heat equation"},{"text":"Uses: Types_mod module~~cfl_mod~~UsesGraph module~cfl_mod CFL_mod module~types_mod Types_mod module~types_mod->module~cfl_mod iso_fortran_env iso_fortran_env iso_fortran_env->module~types_mod Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. this module calculates the CFL number Used By module~~cfl_mod~~UsedByGraph module~cfl_mod CFL_mod program~fd1d_heat_explicit_prb fd1d_heat_explicit_prb module~cfl_mod->program~fd1d_heat_explicit_prb Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs.","tags":"","loc":"module/cfl_mod.html","title":"CFL_mod – 1D heat equation"},{"text":"Uses: Types_mod RHS_mod CFL_mod IO_mod Solver_mod program~~fd1d_heat_explicit_prb~~UsesGraph program~fd1d_heat_explicit_prb fd1d_heat_explicit_prb module~solver_mod Solver_mod module~solver_mod->program~fd1d_heat_explicit_prb module~cfl_mod CFL_mod module~cfl_mod->program~fd1d_heat_explicit_prb module~io_mod IO_mod module~io_mod->program~fd1d_heat_explicit_prb module~types_mod Types_mod module~types_mod->program~fd1d_heat_explicit_prb module~types_mod->module~solver_mod module~types_mod->module~cfl_mod module~types_mod->module~io_mod module~rhs_mod RHS_mod module~types_mod->module~rhs_mod module~rhs_mod->program~fd1d_heat_explicit_prb module~rhs_mod->module~solver_mod iso_fortran_env iso_fortran_env iso_fortran_env->module~types_mod Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Zhong-Nan Wang, University of Cambridge\n Solves the one dimensional heat diffusion equation\n  \\frac{\\partial H}{\\partial t}\n     - \\kappa\\frac{\\partial&#94;{2} H}{\\partial x&#94;{2}} = f(x) ","tags":"","loc":"program/fd1d_heat_explicit_prb.html","title":"fd1d_heat_explicit_prb – 1D heat equation"}]}